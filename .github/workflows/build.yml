name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  app_name: RegexFileSearcher
  build_type: Release

jobs:
  build:
    name: ${{ matrix.config.name }} | ${{ env.build_type }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: Windows,
            os: windows-latest,
            project: Wpf,
            runtime: win-x86,
            framework: net5.0-windows,
            is_single_file: "false"
          }
        - {
            name: Linux,
            os: ubuntu-latest,
            project: Gtk,
            runtime: linux-x64,
            framework: net5.0,
            is_single_file: "true"
          }
        - {
            name: macOS,
            os: macos-latest,
            project: Mac,
            runtime: osx-x64,
            framework: net5.0,
            is_single_file: "true"
          }

    steps:
      - uses: actions/checkout@v2

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 5.0.x
         
      # This cheap hack is needed because of a build environment "bug": https://github.com/actions/setup-dotnet/issues/155
      - name: Clean
        run: dotnet clean && dotnet nuget locals all --clear

      - name: Publish
        run: dotnet publish ${{ env.app_name }}/${{ env.app_name }}.${{ matrix.config.project }}/${{ env.app_name }}.${{ matrix.config.project }}.csproj --configuration ${{ env.build_type }} --output publish --self-contained true -p:PublishSingleFile=${{ matrix.config.is_single_file }} --runtime ${{ matrix.config.runtime }} --framework ${{ matrix.config.framework }}

      - uses: actions/upload-artifact@v2
        with:
            path: publish
            name: ${{ matrix.config.runtime }} ${{ env.build_type }}

      - name: List Build Directory
        if: always()
        shell: bash
        run: |
          git status
          ls -lR publish

  upload-packages:
    needs: build
    runs-on: ubuntu-latest
    if: (github.event_name == 'release' && github.event.action == 'published' && startsWith(github.ref, 'refs/tags/'))
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            runtime: win-x86
          }
        - {
            runtime: linux-x64
          }
        - {
            runtime: osx-x64
          }
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Download extension artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.config.runtime }} ${{ env.build_type }}

      - name:  Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ env.app_name }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.config.runtime }}.zip
          asset_name: ${{ env.app_name }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.config.runtime }}.zip
          asset_content_type: application/zip
